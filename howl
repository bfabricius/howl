TEST
#!/bin/bash

#------------------------------------------------------------------------------
export HOWL_ROOT=$PWD

. "$HOWL_ROOT/scripts/helpers.sh"
. "$HOWL_ROOT/scripts/common.sh"

#------------------------------------------------------------------------------
# Helpers
#
err() {
    echo -e >&2 ERROR: $@\\n
}

info() {
    echo INFO: $@
}

die() {
    err $@
    exit 1
}

has() {
    # eg. has command update
    local kind=$1
    local name=$2

    #echo kind $1
    #echo name $2

    type -t $kind:$name | grep -q function
}

configParamHook() {
    #echo hook Arg: $@
    #echo first Arg: $1
    if [[ $1 == 1 ]]; then
		err "Missing option configuration parameters."
		exit
	fi
}

imageCommandHook() {
    #echo hook Arg: $@
    #echo first Arg: $1
    if [[ $1 == 0 ]]; then
		err "Missing image command line."
		exit
	fi
}

howl_version () {
    if test -f howl-version.txt ; then
        echo $(cat howl-version.txt)
    else
        echo "0.0.0"
    fi
}

#------------------------------------------------------------------------------
# Command handlers
#

command:help() {
    if [[ $# != 0 ]]; then
        if ! has command $1; then
            error_report "\"$1\" is not a howl command"
            command:help
        elif ! has help $1; then
            error_report "No help found for \"$1\""
        else
            help:$1
        fi
    else
        cat >&2 <<ENDHELP

howl v$(howl_version) - Virtual build environment for compiling and running OWL polyglot DSP patches.

Developed by Happy Thoughts Audio - https://www.htaudio.de

This is the official Howl CLI tool to compile and run audio DSP patches on OWL devices.
Please report any problems by creating a github issue at https://github.com/bfabricius/howl
or sending an email to <support@htaudio.de>.

usage: howl [builtin command] [arguments]

Builtin commands:
    help        - display help info
    start       - start howl virtual machine
    stop        - stop howl virtual machine
    status      - get howl virtual machine status
    test        - run a test script to test howl virtual environment
    build       - build and run an audio DSP patch for OWL
    listdevices - list any connected OWL device
    listpatches - list audio dsp patch repository content
    readconfig  - read and print the howl configuration to std out
    configure   - configure howl config export variables, e.g. HEAVYTOKEN
    boxupdate   - check for howl virtual box updates and install if available
    boxversion  - display howl virtual box versioning information
    version     - display verson information

For command-specific help: howl help <command>
ENDHELP
    fi
}


#------------------------------------------------------------------------------
# How command handlers
#

command:start() {
    info_report "Starting Howl virtual machine..."
    if [[ "$(vagrant_vm_running)" = "true" ]]; then
        info_report "Howl is already running!"
    else
        if [[ "$(vagrant_up)" = "false" ]]; then
            error_report "Could not start Howl virtual machine"
        else
            ok_report "Successfully started Howl virtual machine"
        fi
    fi
}

command:stop() {
    info_report "Stopping Howl virtual machine..."
    if [[ "$(vagrant_vm_running)" = "true" ]]; then
        if [[ "$(vagrant_halt)" = "false" ]]; then
            error_report "Could not stop Howl virtual machine"
        else
            ok_report "Successfully stopped Howl virtual machine"
        fi
    else
        info_report "Howl virtual machine is not running!"
    fi
}

command:status() {
    info_report "Getting Howl virtual machine status..."
    vagrant_vm_status
}

command:test() {
    if [[ $1 = "list" ]]; then
        info_report "Listing Howl tests:"
        echo "$(tree tests/)"
        exit 0
    fi
    info_report "Running Howl test: ${1}"
    ./tests/${1}.sh
}

help:test() {
    echo "usage: test [list|<platform/testname>]"
}

command:listdevices() {
    if [[ $1 = "owl" ]]; then
        info_report "Listing OWL devices detected by Howl virtual machine"
        local r=$(vagrant_ssh lsusb | grep -i "owl")
        if [[ "${r}" = "" ]]; then
            info_report "No OWL devices detected"
        else
            info_report "${r}"            
        fi
        exit $?
    fi
    info_report "Listing USB devices detected by Howl virtual machine"
    vagrant_ssh lsusb
}

command:listpatches() {
    info_report "Listing Howl patch repository contents:"
    echo "$(tree patches/)"
}

command:build() {

    if [[ $# -eq 0 ]]; then
        info_report "Missing build options."
        help:build
        exit 1
    fi

    PATCH_LANG=''
    PATCH_NAME=''
    RUN_PATCH=0

    for arg in $@; do
        case $arg in
            -l=*|--lang=*)
                PATCH_LANG="${arg#*=}"
                # info_report "Patch language selected is ${PATCH_LANG}"
                shift
                ;;
            -n=*|--name=*)
                PATCH_NAME="${arg#*=}"
                # info_report "Patch name set is ${PATCH_NAME}"
                shift
                ;;
            -r|--run)
                RUN_PATCH=1
                # info_report "Patch will be deployed and run after build process."
                shift
                ;;
            -*)
                error_report "Unkown command line argument ${arg}"
                exit 1
                ;;
            *)
                break
                ;;
        esac        
    done


    case $PATCH_LANG in
        cpp|faust|gen|pd)
            PATCH_PATH="/howl/patches/${1}"
            # PATCH_NAME="${2}"
            ;;
        *)
            error_report "No patch patch language option set or patch language not supported."
            exit 1
    esac

    info_report "Following compile options have been set:"
    echo "==========================================================================="
    echo -e "DSP patch name:\t\t\t${PATCH_NAME}"
    echo -e "DSP patch language:\t\t${PATCH_LANG}"
    echo -e "Howl patch repository path:\t${PATCH_PATH}"
    echo -e "Run DSP patch:\t\t\t${RUN_PATCH}"
    echo "==========================================================================="

    if [[ "${PATCH_LANG}" = "cpp" ]]; then
        buildcpp $PATCH_PATH $PATCH_NAME $RUN_PATCH
    elif [[ "${PATCH_LANG}" = "pd" ]]; then
        buildpd $PATCH_PATH $PATCH_NAME $RUN_PATCH
    fi

    # compilecpp $LANG $PATCH_PATH

}

help:build() {
    echo "usage: build -l|--lang=<cpp|faust|pd|gen> -n|--name=<dsp patch name> [-r|--run] <dsp patch repository path>"
}

buildcpp() {
    info_report "Building cpp patch ${2} at Howl patch repository path ${2}. Follow Howl virtual machine build output below:"
    vagrant_ssh "/howl/scripts/buildcpp.sh ${1} ${2} ${3}"
}

buildpd() {
    info_report "Building pd patch ${2} at Howl patch repository path ${2}. Follow Howl virtual machine build output below:"
    vagrant_ssh "/howl/scripts/buildpd.sh ${1} ${2} ${3}"
}

command:version() {
    echo "howl v$(howl_version) - Virtual build environment for compiling and running OWL polyglot DSP patches"
}

command:readconfig() {
    if [[ -f ./scripts/howl/exports.sh ]]; then
        info_report "======== HOWL CONFIGURATION EXPORTS ========"
        while read line ; do
            echo $line
        done < "./scripts/howl/exports.sh"
        echo ""
    else
        error_report "Could not find exports.sh config file."
    fi
}

command:configure() {
    if [[ $# -ne 2 ]]; then
        error_report "usage: config <variable naeme> <value>"
        exit 1
    fi
    if [[ -f ./scripts/howl/exports.sh ]]; then
        info_report "Found exports.sh config file."
        # sed -i 's/${1}=.*/${1}=${2}/' ./script/howl/exports.sh
        sedparam=s/${1}=.*/${1}=${2}/
        sed -i ".bak" "${sedparam}" ./scripts/howl/exports.sh
        info_report "Configured ${1}=${2}. Current configuration:"
        echo ""
        command:readconfig
    else
        error_report "Could not find exports.sh config file."
    fi
}

command:boxupdate() {
    info_report "Running howl update. Checking if howl is running."
    running=$(vagrant_vm_running)
    if [[ "$running" = "true" ]]; then
        error_report "Howl is running. Please stop howl and then run the update again."
        exit 1
    fi
    read -p "Do you want to check for updates? (yY/nN) "  -r
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        info_report "Checking for available updates on vagrant cloud"
        update_text=$(vagrant box outdated)
        update_available=$(vagrant box outdated | wc -l)
        if [[ $update_available -gt 1 ]]; then
            echo $update_text
            info_report "Update found."
            read -p "Do you want to install the latest howl virtual box update?  (yY/nN) " -r
            if [[ $REPLY =~ ^[Yy]$ ]]; then
                vagrant box update
                info_report "Running swap of virtual boxes."
                read -p "Do you want to replace your old howl box with the new updated box? (yY/nN) "  -r
                if [[ $REPLY =~ ^[Yy]$ ]]; then
                    vagrant destroy && info_report "Your howl box has been updated. You can now run howl again."
                fi
            else
                echo $update_text
                exit $?
            fi
        else
            info_report "No updates available"
            exit $?
        fi
    fi
    exit $?
}

command:boxversion() {
    info_report "Howl box version information"
    vagrant box list | grep "arch-howl"
}

#------------------------------------------------------------------------------
# Option processing
#

if [[ $# == 0 ]]; then
    error_report "No howl command line specified."
    command:help
    exit        
fi

case $1 in

    *)
        # info "Checking for built-in command: \"$1\""
        # If this is a builtin command, execute it, otherwise fall through
        if has command $1; then
           command:$1 "${@:2}" # array slice skipping first element
           exit $?
        fi
        info_report "No built-in command found: \"$1\""
        # info "Defaulting to calling command line to be executed in image: \"$@\""
        ;;

esac

exit $?
